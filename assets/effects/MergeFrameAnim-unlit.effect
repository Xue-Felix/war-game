// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        frameScale:     { value: [1, 1, 1, 0] }
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 frameScale; //缩放比例
      vec4 tilingOffset;          
    };
  #endif

  //顶点信息:xy:uv偏移, w:合并后的模型索引
  in vec4 a_animData0; 
  //透明度 v_opacity.x;
  out vec2 v_opacity;
  //叠加颜色 rbg
  out vec4 v_transCol;

  uniform CustomParams{
    //xyz:坐标 ,w缩放
    vec4 trans0[55];
    //xyz:旋转 ,w透明度
    vec4 trans1[55];
    //xy 动态uv切换,
    vec4 trans2[55];
    //xyzw 颜色:rbga
    vec4 trans3[55];

  };
 
  vec3 rotateX(vec3 v,float a){      
    // perform rotation
    float cosA = cos(a);
    float sinA = sin(a);
    float rx = v.x;
    float ry = v.y * cosA - v.z * sinA;
    float rz = v.y * sinA + v.z * cosA;

     vec3 outV = vec3(rx,ry,rz);
     return outV;
  }

   vec3 rotateY(vec3 v,float a){      
    // perform rotation
    float cosA = cos(a);
    float sinA = sin(a);
    float rx = v.z * sinA + v.x * cosA;
    float ry = v.y;
    float rz = v.z * cosA - v.x * sinA;

     vec3 outV = vec3(rx,ry,rz);
     return outV;
  }

   vec3 rotateZ(vec3 v,float a){      
    // perform rotation
    float cosA = cos(a);
    float sinA = sin(a);
    float rx = v.x * cosA - v.y * sinA;
    float ry = v.x * sinA + v.y * cosA;
    float rz = v.z;

     vec3 outV = vec3(rx,ry,rz);
     return outV;
  }

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);


     //获取时间数据
    int vecIndex = int(a_animData0.w);
    
    //计算旋转
    vec3 curRot = vec3(trans1[vecIndex].xyz);
    
    //billBoard - 旋转角度=0.0
    #if USE_BILLBOARD
      curRot.xyz *=0.0;
    #endif

    vec3 _pos = vec3(position.xyz);
    _pos = rotateY(_pos, curRot.y);
    _pos = rotateZ(_pos, curRot.z);
    _pos = rotateX(_pos, curRot.x);
    
    //缩放
    _pos.xyz *= frameScale.xyz;    

    _pos *= trans0[vecIndex].w;

    //位移
    vec3 curPos = vec3(trans0[vecIndex].xyz);    

    //透明度
    v_opacity.x = trans1[vecIndex].w;
    v_opacity.y = 0.0;

    position.xyz = _pos.xyz + curPos.xyz;
    
    //叠加颜色
    v_transCol = vec4(trans3[vecIndex]);

    
    #if USE_TEXTURE
      // v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      //uv偏移 trans2.xy
      v_uv = a_texCoord * tilingOffset.xy + trans2[vecIndex].xy;

      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

     //中心点坐标
    vec4 transPos = (cc_matView * matWorld) * position;
    #if USE_BILLBOARD
        transPos = (cc_matView * matWorld) * vec4(curPos.x,curPos.y,curPos.z,position.w);
        transPos.xyz += _pos;
    #endif

    CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * transPos;

    // CC_TRANSFER_FOG(matWorld * position);
    // return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif
  
  in vec2 v_opacity; //v_opacity.x
  in vec4 v_transCol; //叠加颜色

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o.rgb *= SRGBToLinear(v_color.rgb);//use linear
      o.a *= v_color.a;
    #endif

    #if USE_TEXTURE
      vec4 texColor = texture(mainTexture, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      o *= texColor;
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    //叠加颜色
    o *= v_transCol;
    //透明度
    o.a *= v_opacity.x;


    CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%
