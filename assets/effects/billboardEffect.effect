// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }

        boardScale:     { value: [1, 1, 1, 1], editor: { tooltip: "xy:顶点坐标缩放，相当于节点缩放值,z:旋转速度"} }
        frameData:      { value: [1, 1, 30, 1], editor: { tooltip: "xy:贴图水平垂直方向包含的帧数；\nz:动画帧率；\nw:动画总帧数" } }
        playData:       { value: [0, 1, 0, 0], editor: { tooltip: "x:动画播放次数，0表示无限循环；\ny:0-从第0帧开始播放，1-随机从某一帧开始播放，适用于循环动画；\nz:将动画暂停到指定的帧数，【帧数计数从1开始】，0表示不暂停;\nw:开始播放的时间戳(单位：秒)" } }
        animData:       { value: [0, 0, 0, 0], editor: { tooltip: "x:起始帧索引，从0开始计数，\n结束帧的索引为 animData.x + frameData.w - 1" } }
        
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  out vec2 v_uv;
  #if USE_TEXTURE
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

    //计算绕Y轴旋转指定弧度
  vec4 rotateZ (vec4 v,float a) {
    float _cos = cos(a);
    float _sin = sin(a);
    float rx = v.x * _cos - v.y * _sin;
    float ry = v.x * _sin + v.y * _cos;    
    float rz = v.z;    
    return vec4(rx,ry,rz,v.w);
  }

  //
  uniform frameAnimData {
    // x:贴图水平方向包含的帧数,
    // y:贴图垂直方向包含的帧数，
    // z:动画每秒钟要播放的帧数，
    // w:动画总的帧数，
    vec4 frameData;
    // x:动画播放次数，0表示无限循环播放，到达播放次数后将不再渲染
    // y:0-从第0帧开始播放，1-随机从某一帧开始播放，适用于循环动画
    // z:将动画暂停到指定的帧数，【帧数计数从1开始】，0表示不暂停
    // w:开始播放的时间戳(单位：秒)，取director.root.cumulativeTime的值，
    // 动画不要求从第0帧开始播放时，w的值无需设置
    vec4 playData;
    // x:起始帧索引，从0开始计数，（结束帧的索引为 animData.x + frameData.w - 1）
    vec4 animData;
    //
    vec4 boardScale;
  };
  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

     //计算UV
    vec4 position2 = vec4(0.0, 0.0, 0.0, position.w);
    vec4 wpos =  position2;
    float frame = playData.z;
    //未暂停动画时，按时间计算动画要播放的帧数
    if(frame == 0.0) {
      //动画累计播放时间 = 当前时间 - 起始时间 + 根据节点世界坐标附加的时间偏移量
      float time = cc_time.x - playData.w + (wpos.x + wpos.y + wpos.z) * playData.y * 0.3;
      //动画当前要播放的帧数 = 播放时间 * 帧率 (帧数 = 时间 * 帧数/秒)
      frame = floor(time * frameData.z);
      //有播放次数限制时：
      if (playData.x > 0.0) {
        float count = frame / frameData.w;
        //达到播放次数则不再渲染
        if (count >= playData.x) {
          v_uv = a_texCoord;
          return position2;
        }
      }
      //循环播放：
      frame = mod(frame, frameData.w);
    } else {
      frame -= 1.0;
    }
    frame += animData.x;
    //UV偏移
    float uvx = (mod(frame, frameData.x) + a_texCoord.x) / frameData.x;
    float uvy = (floor(frame / frameData.x) + a_texCoord.y) / frameData.y;
    v_uv = vec2(uvx, uvy);


    //billBoard
    vec4 fogWpos = matWorld * position;
    vec4 transPos = (cc_matView * matWorld) * position;

    #if USE_BILLBOARD
      vec4 pos = vec4(0.0, 0.0, 0.0, position.w);
      vec4 pos2 = vec4(position); 
      pos = (cc_matView * matWorld) * pos;
      //旋转
      #if USE_ROTATE  
        pos2 = rotateZ(pos2, boardScale.z * cc_time.x);
        pos2.xy *= boardScale.xy;
      #endif
      pos.xy += pos2.xy;

      fogWpos = matWorld * pos;
      transPos = pos;
    #endif

    CC_TRANSFER_FOG(fogWpos);
    return cc_matProj * transPos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o.rgb *= SRGBToLinear(v_color.rgb);//use linear
      o.a *= v_color.a;
    #endif

    #if USE_TEXTURE
      vec4 texColor = texture(mainTexture, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      o *= texColor;
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif

    CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%
